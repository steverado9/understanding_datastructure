what is Data Structure?
A data structure is defined as a particular way of storing and organizing data in our devices to use the data efficiently
and effectively. 
An efficient data structure takes minimum memory space and requires minimum time to execute the data.

The complete process to learn DS from scratch can be broken into 3 parts.
1)Learn about Time and Space complexities.
2)Learn the basics of individual Data Structures.
3)Practice Problems on Data Structures.

1)Learn about Time and Space complexities
The primary motive to use DSA is to solve a problem effectively and efficiently.
How can you decide if a program written by you is efficient or not? This is measured by complexities.
complexity is of two trypes
-Time complexity: Time complexity is used to measure the amount of time required to execute the code.
-space complexity: Space complexity means the amount of space required to execute successfully the functionalities of the code.
note:
Auxiliary space: This is the extra space used in the program other than the input data structure.
Both of the above complexities are measured with respect to the input parameters. But here arises a problem.
The time required for executing a code depends on several factors, such as:
*)The number of operations performed in the program,  
*)The speed of the device, and also 
*)The speed of data transfer is being executed on an online platform.

2)Learn Data Structures
The topic of DSA consists of two parts: 
a)Data Structures.
b)Algorithms.
Though they are two different things, they are highly interrelated, and it is very important to follow the right track
to learn them most efficiently.

1. Array in javascript:
An array is a collection of items of the same variable type stored that are stored at contiguous memory locations.
It’s one of the most popular and simple data structures and is often used to implement other data structures.
Each item in an array is indexed starting with 0.
There are basically two ways to declare an array
check array declearion.js
    Types of Array operations
-Traversal: Traverse through the elements of an array.
-Insertion: Inserting a new element in an array.
-Deletion: Deleting element from the array.
-Searching: Search for an element in the array.
-Sorting: Maintaining the order of elements in the array.

2. String in javascript
JavaScript strings are used for storing and manipulating text.
It can contain zero or more characters within quotes.
There are two ways to create a string in Javascript
-By string literal.
-By string object.
    String operations
-Substrings: A substring is a sequence of characters within a string.
-Concatenation: This operation is used for appending one string to the end of another string.
-Length: It defines the number of characters in the given string.
-Text Processing Operations: Text processing is the process of creating and editing strings.
    o)Insertion: This operation is used to insert characters in the string at the specified position.
    o)Deletion: This operation is used to delete characters in the string at the specified position.
    o)Update: This operation is used to update characters in the string at the specified position.

3.  Linked List in JavaScript
A linked list is a linear data structure.
It is basically chains of nodes, each node contains information such as data and a pointer to the next node in the chain.
In the linked list there is a head pointer, which points to the first element of the linked list
and if the list is empty then it simply points to null or nothing.
    Operations on Linked List:
a)Traversal: We can traverse the entire linked list starting from the head node.
If there are n nodes then the time complexity for traversal becomes O(n) as we hop through each and every node.
b)Insertion: Insert a key to the linked list.
An insertion can be done in 3 different ways:
insert at the beginning of the list, insert at the end of the list and insert in the middle of the list.
c)Deletion: Removes an element x from a given linked list.
A deletion can be done in 3 different ways;
delete from the beginning of the list, delete from the end of the list and delete from the middle of the list.
d)Search: Find the first element with the key k in the given linked list by a simple linear search and 
returns a pointer to this element.

4. Stack in JavaScript
Stack is a linear data structure in which insertion and deletion are done at one end.
This end is generally called the top.
It works on the principle of Last In First Out (LIFO) or First in Last out (FILO).
LIFO means the last element inserted inside the stack is removed first.
FILO means, the last inserted element is available first and is the first one to be deleted.
    Operations in a Stack:
a)Push: Add an element to the top of a stack.
b)Pop: Remove an element from the top of a stack.
c)IsEmpty: Check if the stack is empty.
d)IsFull: Check if the stack is full.
e)top/Peek: Get the value of the top element without removing it.

5. Queue in JavaScript
A Queue is a linear structure that follows a particular order in which the operations are performed.
The order is First In First Out (FIFO)
    Operations of Queue:
A queue is an object (an abstract data structure – ADT) that allows the following operations
a)Enqueue: Add an element to the end of the queue
b)Dequeue: Remove an element from the front of the queue
c)IsEmpty: Check if the queue is empty
d)IsFull: Check if the queue is full
e)top/Peek: Get the value of the front of the queue without removing it

6. Tree in JavaScript
A tree is non-linear and has a hierarchical data structure consisting of a collection of nodes 
such that each node of the tree stores a value and a list of references to other nodes (the “children”).
    Types of Trees:
-Binary Tree
-Binary Search Tree
-AVL Tree
-B-Tree
-Red Black Tree
-N-ary Tree
    Operations on tree data structure:
a)Insert: Insert an element in a tree/create a tree.
b)Search: Searches an element in a tree.
c)Tree Traversal: The tree traversal algorithm is used in order to visit a specific node in the tree to perform a
specific operation on it.

7. Priority Queue in JavaScript
A priority queue is a type of queue that arranges elements based on their priority values.
Elements with higher priority values are typically retrieved before elements with lower priority values.
We will store the elements of the Priority Queue in the heap structure.
When using priority queues the highest priority element is always the root element.

8. Map in JavaScript
Map is a collection of elements where each element is stored as a Key, value pair.
Map objects can hold both objects and primitive values as either key or value.
When we iterate over the map object it returns the key, and value pair in the same order as inserted.
Syntax: 
new Map([it])
it – It is any iterable object whose values are stored as key, value pair.
If the parameter is not specified then a new map created is Empty.

9.  Set in JavaScript
A set is a collection of items that are unique i.e no element can be repeated
elements of the set can be iterated in the insertion order
Set can store any type of value whether primitive or objects
Syntax: 
new Set([it]);
it: It is an iterable object whose all elements are added to the new set created,
If the parameter is not specified or null is passed then a new set created is empty

10. Graph in JavaScript
A Graph is a non-linear data structure consisting of nodes and edges
The nodes are sometimes also referred to as vertices and the edges are lines or arcs that connect any two nodes in the graph
More formally, A Graph consisting of a finite set of vertices(or nodes) and a set of edges that connect a pair of nodes.
    Graph Representation
In the graph data structure, a graph representation is a technique to store graphs in the memory of the computer.
There are many ways to represent a graph:
The following two are the most commonly used representations of a graph.
1)Adjacency Matrix: An adjacency matrix represents a graph as a matrix of boolean values (0s and 1s).
In a computer, a finite graph can be represented as a square matrix, where the boolean value indicates if two vertices are connected directly.

2)Adjacency List: An adjacency list represents a graph as an array of linked lists .
where an index of the array represents a vertex and each element in its linked list represents the other vertices that are connected with the edges, or say its neighbor.

    Graph Operations
-Add/Remove Vertex: Add or remove a vertex in a graph.
-Add/Remove Edge: Add or remove an edge between two vertices.
-Check if the graph contains a given value.
-Check if the graph contains a given value.
















